version: '3.8'

networks:
  omnisecai-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  valkey_data:
  uploaded_models:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: omnisecai-postgres
    environment:
      POSTGRES_DB: omnisecai_security
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: dev_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - omnisecai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d omnisecai_security"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB for Logs and Unstructured Data
  mongodb:
    image: mongo:6-jammy
    container_name: omnisecai-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: dev_password_2024
      MONGO_INITDB_DATABASE: omnisecai_logs
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./config/database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    networks:
      - omnisecai-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Valkey for Caching and Sessions (Redis Alternative)
  valkey:
    image: valkey/valkey:7-alpine
    container_name: omnisecai-valkey
    command: valkey-server --appendonly yes --requirepass dev_password_2024
    ports:
      - "6379:6379"
    volumes:
      - valkey_data:/data
    networks:
      - omnisecai-network
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: omnisecai-backend
    ports:
      - "8000:8000"
      - "9229:9229"  # Node.js debugging port
    environment:
      - NODE_ENV=development
      - PORT=8000
      - DATABASE_URL=postgresql://admin:dev_password_2024@postgres:5432/omnisecai_security
      - MONGODB_URL=mongodb://admin:dev_password_2024@mongodb:27017/omnisecai_logs?authSource=admin
      - VALKEY_URL=redis://:dev_password_2024@valkey:6379
      - JWT_SECRET=dev_jwt_secret_key_2024
      - LOG_LEVEL=debug
    volumes:
      - ./backend/src:/app/src
      - ./backend/package.json:/app/package.json
      - ./backend/package-lock.json:/app/package-lock.json
      - uploaded_models:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      valkey:
        condition: service_healthy
    networks:
      - omnisecai-network
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.dev
    container_name: omnisecai-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
      - VITE_MONITORING_URL=http://localhost:9000
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./index.html:/app/index.html
      - ./vite.config.ts:/app/vite.config.ts
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
    depends_on:
      - backend
    networks:
      - omnisecai-network
    command: npm run dev -- --host 0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring and Analytics Service
  monitoring:
    build:
      context: ./monitoring
      dockerfile: Dockerfile.dev
    container_name: omnisecai-monitoring
    ports:
      - "9000:9000"
      - "5555:5555"  # Python debugging port
    environment:
      - PYTHON_ENV=development
      - DATABASE_URL=postgresql://admin:dev_password_2024@postgres:5432/omnisecai_security
      - MONGODB_URL=mongodb://admin:dev_password_2024@mongodb:27017/omnisecai_logs?authSource=admin
      - VALKEY_URL=redis://:dev_password_2024@valkey:6379
      - LOG_LEVEL=DEBUG
    volumes:
      - ./monitoring/src:/app/src
      - ./monitoring/requirements.txt:/app/requirements.txt
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      valkey:
        condition: service_healthy
    networks:
      - omnisecai-network
    command: python -m uvicorn src.main:app --host 0.0.0.0 --port 9000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # NGINX Reverse Proxy (Optional for development)
  nginx:
    image: nginx:alpine
    container_name: omnisecai-nginx
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/nginx/dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
      - monitoring
    networks:
      - omnisecai-network
    profiles:
      - nginx